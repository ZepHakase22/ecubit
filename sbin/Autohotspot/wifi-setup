#!/bin/bash

#Check for Raspbian and version.
osver=($(cat /etc/issue))
cpath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
echo $cpath
opt="X"
vhostapd="N" vdnsmasq="N" autoH="N"
autoserv="N" iptble="N" nftble="N"

if [ "${osver[0]}" != 'Raspbian' ]; then
	echo "This AutoHotspot installer is only for the OS Raspbian on the Raspberry Pi"
	exit 1
elif [ "${osver[2]}" -ge 10 ]; then
	echo 'Raspbian Version' "${osver[2]}"
elif [ "${osver[2]}" -lt 8 ];then
	echo "The version of Raspbian is too old for the Autohotspot script"
	echo "Version 8 'Jessie' is the minimum requirement"
fi

declare -A matrix
num_columns=2
num_rows=0
re='^[0-9]+$'

hostapd_config()
{
	echo "hostapd Config"
	echo "Hostapd Status is " $vhostapd
	if [ "$vhostapd" = "N" ]; then
		echo "Hostapd not installed- now installing"
		sudo apt -q install hostapd
		echo "Recheck install Status"
		check_installed
		if [ "$vhostapd" = "N" ]; then
			sudo apt-get update
			sudo apt -q install hostapd
		fi 
		if [ "$vhostapd" = "N" ]; then
			echo ""
			echo ""
			echo "Hostapd failed to install. Check there is internet access"
			echo "and try again"
			echo "Press a key to continue"
			read
			menu
		fi
	fi
	echo "Hostapd is installed"
	if ! grep -F "RaspberryConnect.com" "/etc/hostapd/hostapd.conf" ;then
		#not a autohotspot file, create backup
		sudo mv "/etc/hostapd/hostapd.conf" "/etc/hostapd/hostapd-RCbackup.conf"
	fi
	sudo cp "$cpath/config/hostapd.conf" /etc/hostapd/hostapd.conf
	if [ "${osver[2]}" -lt 10 ]; then
		sudo cp "$cpath/config/hostapd" /etc/default/hostapd
	fi
	if [ "$opt" = "AHN" ] || [ "$opt" = "AHD" ]; then
		#For Autohotspots
		echo "Unmask & Disable Hostapd"
		if systemctl -all list-unit-files hostapd.service | grep "hostapd.service masked" ;then
			sudo systemctl unmask hostapd.service >/dev/null 2>&1
		fi
		if systemctl -all list-unit-files hostapd.service | grep "hostapd.service enabled" ;then
			sudo systemctl disable hostapd.service >/dev/null 2>&1
		fi
	elif [ "$opt" = "SHS" ]; then
		#for Static Hotspot
		echo "Unmask and enable hostapd"
		if systemctl -all list-unit-files hostapd.service | grep "hostapd.service masked" ;then
			sudo systemctl unmask hostapd >/dev/null 2>&1
		fi
		if systemctl -all list-unit-files hostapd.service | grep "hostapd.service disabled" ;then
			sudo systemctl enable hostapd >/dev/null 2>&1
		fi
	elif [ "$opt" = "REM" ]; then
		if [ -f "/etc/hostapd/hostapd-RCbackup.conf" ] ; then
			sudo mv "/etc/hostapd/hostapd-RCbackup.conf" "/etc/hostapd/hostapd.conf"
		fi
	fi
	#check country code for hostapd.conf
	wpa=($(cat "/etc/wpa_supplicant/wpa_supplicant.conf" | grep "country="))
	hapd=($(cat "/etc/hostapd/hostapd.conf" | grep "country_code="))
	if [[ ! ${wpa: -2} == ${hapd: -2} ]] ; then
		echo "Changing Hostapd Wifi country to " ${wpa: -2} 
		sudo sed -i -e "/country_code=/c\country_code=${wpa: -2}" /etc/hostapd/hostapd.conf
	fi
}
dnsmasq_config()
{
	echo "Dnsmasq Config"
	if [ "$vdnsmasq" = "N" ]; then
		sudo apt -q install dnsmasq
		check_installed
		if [ "$vdnsmasq" = "N" ]; then
			sudo apt-get update
			sudo apt -q install dnsmasq
		fi
		check_installed
		if [ "$vdnsmasq" = "N" ]; then
		    echo ""
		    echo ""
			echo "dnsmasq failed to install. Check there is internet access"
			echo "and try again"
			echo "Press a key to continue"
			read
			menu
		fi
	fi
	if [ -f "/etc/dnsmasq.conf" ] ; then
		if ! grep -F "RaspberryConnect.com" "/etc/dnsmasq.conf" ;then
			#not a autohotspot file, create backup
			sudo mv "/etc/dnsmasq.conf" "/etc/dnsmasq-RCbackup.conf"
		fi
	fi
	if [ "$opt" = "AHN" ] ; then
		echo "${cpath}/config/dnsmasqAHSN.conf"
		sudo cp "${cpath}/config/dnsmasqAHSN.conf" "/etc/dnsmasq.conf"
	elif [ "$opt" = "AHD" ];then
		sudo cp "${cpath}/config/dnsmasqAHS.conf" "/etc/dnsmasq.conf"
	elif [ "$opt" = "SHS" ] ;then
		sudp cp "${cpath}/config/dnsmasqSHS.conf" "/etc/dnsmasq.conf"
	fi
	if [ "$opt" = "AHN" ] || [ "$opt" = "AHD" ]; then
		#For Autohotspots
		echo "Unmask & Disable Dnsmasq"
		if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service masked" ;then
			sudo systemctl unmask dnsmasq >/dev/null 2>&1
		fi
		if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service enabled" ;then
			sudo systemctl disable dnsmasq >/dev/null 2>&1
		fi
	elif [ "$opt" = "SHS" ]; then
		#for Static Hotspot
		echo "Unmask & Enable Dnsmasq"
		if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service masked" ;then
			sudo systemctl unmask dnsmasq >/dev/null 2>&1
		fi
		if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service disabled" ;then
			sudo systemctl enable dnsmasq >/dev/null 2>&1
		fi
	fi
	if [ "$opt" = "REM" ]; then
		if [ -f "/etc/dnsmasq-RCbackup.conf" ] ; then
			sudo mv "/etc/dnsmasq-RCbackup.conf" "/etc/dnsmasq.conf"
		fi
	fi
		
}
interface()
{
	#if interfaces file contains network settings
	#backup and remove. 
	if grep -vxf "${cpath}/config/interfaces"  "/etc/network/interfaces" ;then
		sudo mv "/etc/network/interfaces" "/etc/network/RCbackup-interfaces"
		sudo cp "${cpath}/config/interfaces" "/etc/network/interfaces"
	fi
	if [ "$opt" = "REM" ] ;then
		if [ -f "/etc/network/RCbackup-interfaces" ] ;then
			sudo mv "/etc/network/RCbackup-interfaces" "/etc/network/interfaces"
		fi
	fi
}
sysctl()
{
	if [ "$opt" = "AHN" ] || [ "$opt" = "SHS" ] ;then
		sudo sed -i -e "/#net.ipv4.ip_forward=1/c\net.ipv4.ip_forward=1" /etc/sysctl.conf
	elif [ "$opt" = "AHD" ] || [ "$opt" = "REM" ] ;then
		sudo sed -i -e "/net.ipv4.ip_forward=1/c\#net.ipv4.ip_forward=1" /etc/sysctl.conf
	fi
}

dhcpcd_config()
{
	if [ "$opt" = "AHN" ] || [ "$opt" = "AHD" ] ;then
		grep -vxf "${cpath}/config/dhcpcd-remove.conf" "/etc/dhcpcd.conf" > "${cpath}/config/Ndhcpcd.conf"
		cat "${cpath}/config/dhcpcd-autohs.conf" >> "${cpath}/config/Ndhcpcd.conf"
		sudo mv "${cpath}/config/Ndhcpcd.conf" "/etc/dhcpcd.conf"
	elif [ "$opt" = "SHS" ]; then
		grep -vxf "${cpath}/config/dhcpcd-remove.conf" "/etc/dhcpcd.conf" > "${cpath}/config/Ndhcpcd.conf"
		cat "${cpath}/config/dhcpcd-SHSN.conf" >> "${cpath}/config/Ndhcpcd.conf"
		sudo mv "${cpath}/config/Ndhcpcd.conf" "/etc/dhcpcd.conf"
	
	fi
}
auto_service()
{
	if [ "$opt" = "AHN" ] ;then
		sudo cp "${cpath}/config/autohotspot-Net.service" "/etc/systemd/system/autohotspot.service"
		sudo systemctl daemon-reload
		sudo systemctl enable autohotspot
	elif [ "$opt" = "AHD" ] ;then
		sudo cp "${cpath}/config/autohotspot-direct.service" "/etc/systemd/system/autohotspot.service"
		sudo systemctl daemon-reload
		sudo systemctl enable autohotspot
	fi
	if [ "$opt" = "REM" ] || [ "$opt" = "SHS" ]; then
		if systemctl -all list-unit-files autohotspot.service | grep "autohotspot.service enabled" ;then
			sudo systemctl disable autohotspot.service
		fi
		if [ -f "/etc/systemd/system/autohotspot.service" ]; then
			sudo rm /etc/systemd/system/autohotspot.service
		fi
	fi

}
hs_routing()
{
	if [ "$opt" = "SHS" ]  ;then
		if [ "$iptble" = "Y" ] ; then
			if [ ! -f "/etc/systemd/system/hs-iptables.service" ];then
				sudo cp "${cpath}/config/hs-iptables.service" "/etc/systemd/system/hs-iptables.service"
			fi
			if systemctl -all list-unit-files hs-iptables.service | grep "hs-iptables.service enabled" ;then
				sudo systemctl daemon-reload
			fi
			if systemctl -all list-unit-files hs-iptables.service | grep "hs-iptables.service disabled" ;then
				sudo systemctl enable hs-iptables.service
			fi
			if [ ! -f "/etc/iptables-hs" ] ;then
				sudo cp "${cpath}/config/iptables-hs.txt" "/etc/iptables-hs"
				sudo chmod +x "/etc/iptables-hs"
			fi
			
		elif [ "$nftble" = "Y" ] ; then
			echo "future feature"
		
		fi
	elif [ "$opt" = "REM" ] || [ "$opt" = "AHN" ] || [ "$opt" = "AHD" ] ; then
		if systemctl is-active hs-iptables | grep -w "active" ;then
			sudo systemctl disable hs-iptables.service
		fi
		if test -f "/etc/systemd/system/hs-iptables.service" ; then
			sudo rm /etc/systemd/system/hs-iptables.service
		fi
		if test -f "/etc/iptables-hs" ; then
			sudo rm /etc/iptables-hs
		fi
	fi
}

auto_script()
{
	if [ "$opt" = "AHN" ] ;then
		sudo cp "${cpath}/config/autohotspotN" "/usr/bin/autohotspotN"
		sudo chmod +x /usr/bin/autohotspotN
	elif [ "$opt" = "AHD" ] ;then
		sudo cp "${cpath}/config/autohotspot-direct" "/usr/bin/autohotspot"
		sudo chmod +x /usr/bin/autohotspot
	elif [ "$opt" = "REM" ] || [ "$opt" = "SHS" ] ;then
		if [ -f "/usr/bin/autohotspotN" ]; then
			sudo rm /usr/bin/autohotspotN
		fi
		if [ -f "/usr/bin/autohotspot" ]; then
			sudo rm /usr/bin/autohotspot
		fi		
	fi
}

display_HS_IP() #get ip address from current active hotspot script
{
    Aserv=($(cat /etc/systemd/system/autohotspot.service 2>/dev/null| grep "ExecStart="))  #which hotspot is active?
    if [ ${Aserv: -4} = "spot" ] >/dev/null 2>&1  ;then #Direct
		ipline=($(cat /usr/bin/autohotspot | grep "ip a add")) 
		echo "Hotspot IP Address for SSH and VNC: ${ipline[3]: :-3}" 
    elif [ ${Aserv: -4} = "potN" ] >/dev/null 2>&1 ;then #Internet
		ipline=($(cat /usr/bin/autohotspotN | grep "ip a add")) 
		echo "Hotspot IP Address for SSH and VNC: ${ipline[3]: :-3}"
    else #Static Hotspot default IP
		echo "Hotspot IP Address for ssh and VNC: 192.168.50.10"
    fi
}

remove()
{
	if systemctl -all list-unit-files hostapd.service | grep "hostapd.service enabled" ;then
		sudo systemctl disable hostapd >/dev/null 2>&1
	fi
	if systemctl -all list-unit-files dnsmasq.service | grep "dnsmasq.service enabled" ;then
		sudo systemctl disable dnsmasq >/dev/null 2>&1
	fi
	auto_script #Remove Autohotspot Scripts
	#Reset DHCPCD.conf
	grep -vxf "${cpath}/config/dhcpcd-remove.conf" "/etc/dhcpcd.conf" > "${cpath}/config/Ndhcpcd.conf"
	sudo mv "${cpath}/config/Ndhcpcd.conf" "/etc/dhcpcd.conf"
	hs_routing #remove routing for Static HS
	sysctl #remove port forwarding
	interface #restore backup of interfaces fle
	auto_service #remove autohotspot.service
}

Hotspotssid()
{
	#Change the Default Hotspot SSID and Password
	if  [ ! -f "/etc/hostapd/hostapd.conf" ] ;then
		echo "A hotspot is not installed. No Password to change"
		echo "press enter to continue"
		read
		menu
	fi
	HSssid=($(cat "/etc/hostapd/hostapd.conf" | grep '^ssid='))
	HSpass=($(cat "/etc/hostapd/hostapd.conf" | grep '^wpa_passphrase='))
	echo "Change the Hotspot's SSID and Password. press enter to keep existing settings"
	echo "The current SSID is:" "${HSssid:5}"
	echo "The current SSID Password is:" "${HSpass:15}"
	echo "Enter the new Hotspots SSID:"
	read ssname
	echo "Enter the hotspots new password. Minimum 8 characters"
	read sspwd
	if [ ! -z $ssname ] ;then
		echo "Changing Hotspot SSID to:" "$ssname" 
		sudo sed -i -e "/^ssid=/c\ssid=$ssname" /etc/hostapd/hostapd.conf
	else
		echo "The Hotspot SSID is"  ${HSssid: 5}
	fi
	if [ ! -z $sspwd ] && [ ${#sspwd} -ge 8 ] ;then
		echo "Changing Hotspot Password to:" "$sspwd"
		sudo sed -i -e "/^wpa_passphrase=/c\wpa_passphrase=$sspwd" /etc/hostapd/hostapd.conf
	else
		echo "The Hotspot Password is:"  ${HSpass: 15}
	fi
	echo ""
	echo "The new setup will be available next time the hotspot is started"
	echo "Press a key to continue"
	read
	menu
}

go()
{
	opt="$1"
	#echo "Selected" "$opt"
	#echo "Action options"
	if [ "$opt" = "REM" ] ;then
		remove
		echo "Please reboot to complete the uninstall"
	elif [ "$opt" = "HSS" ] ;then
		Hotspotssid
	else
		hostapd_config
		dnsmasq_config
		interface
		sysctl
		dhcpcd_config
		auto_service
		hs_routing
		auto_script
		echo ""
		echo "The hotspot setup will be available after a reboot"
		HSssid=($(cat "/etc/hostapd/hostapd.conf" | grep '^ssid='))
		HSpass=($(cat "/etc/hostapd/hostapd.conf" | grep '^wpa_passphrase='))
		echo "The Hotspots WiFi SSID name is: ${HSssid: 5}"
		echo "The WiFi password is: ${HSpass: 15}"
		display_HS_IP
	fi
	echo "Press any key to continue"
	read
	
}

check_installed()
{
	#check if required software is already installed
	if dpkg -s "hostapd" >/dev/null 2>&1 | grep 'Status: install ok installed' ; then
		vhostapd="Y"
	fi
	if dpkg -s "dnsmasq" >/dev/null 2>&1 | grep 'Status: install ok installed' ; then
		vdnsmasq="Y"
	fi
	#Does an Autohotspot files exist
	if ls /usr/bin/ | grep "autohotspot*" >/dev/null 2>&1 ; then
		autoH="Y"
	fi
	if ls /etc/systemd/system/ | grep "autohotspot.service" >/dev/null 2>&1 ; then
		autoserv="Y"
	fi
	if dpkg -s "iptables" >/dev/null 2>&1 ; then
		iptble="Y"
	fi
	if dpkg -s "nftables" >/dev/null 2>&1 ; then
		nftble="Y"
	fi
}

check_reqfiles()
{	
	fstatus=0
	cd "${cpath}/config/"
	if test -f "Checklist.md5" ;then
		if ! md5sum -c --quiet Checklist.md5 ;then
			echo "one or more of the required files in the config folder are missing or have been altered"
			echo "please download the installer again from RaspberryConnect.com"
			exit
		fi
	else
		echo "The file Checklist.md5 is missing from Config folder"
		echo "Please download the installer again"
		echo "from RaspberryConnect.com"
		exit
	fi
	
}

check_wificountry()
{
	#echo "Checking WiFi country"
	wpa=($(cat "/etc/wpa_supplicant/wpa_supplicant.conf" | grep "country="))
	if [ -z ${wpa: -2} ] || [[ ${wpa: -2} == *"="* ]];then
		echo "The WiFi country has not been set. This is required for the hotspot setup."
		echo "Please update Raspbian with the wifi country using the command 'sudo raspi-config' and choose the localisation menu"
		echo "From the desktop this can be done in the menu Preferences - Raspberry Pi Configuration - Localisation" 
		echo "Once done please try again."
		echo ""
		echo "press a key to continue"
		read
	fi
}
valid_mac() 
{
	local mac=$1
	local stat=1

	if [[ $mac =~ ^(([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2}))|(([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2}))$ ]]; then
		stat=0
	fi
	return $stat

}

valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

prepare()
{
	opt="$1"
	if ! [ -z ${opt} ]; then
		if [ ${opt} == "AMA" ]; then
			f1="%$((${#num_rows}+1))s"
			f2=" %15s"
			printf "$f1" ''
			for ((i=1;i<=2;i++)) do
				if ((i==1)); then
					printf "$f2" "MAC Address"
				else
					printf "$f2" "IP Address"
				fi			
			done
			echo
			for ((j=1;j<=num_rows;j++)) do
				printf $f1 $j
				for ((i=1;i<=num_columns;i++)) do
        			printf "$f2" ${matrix[$j,$i]}
    			done
    			echo
			done
			echo "Enter the row of IP address to associate if any:"
			read var
			if ! [[ $var =~ $re ]] ; then
				var=""
			fi
			echo "Enter the MAC address:"
			read var1
			if [ -z ${var} ] || (( var > num_rows )); then
				if valid_mac ${var1} ; then
					num_rows=$(( num_rows + 1 ))
					matrix[$num_rows,1]=$var1
				else
                    echo "error: Not a mac address. Press any key and repeat"
                    read
				fi
			else
				if valid_mac ${var1} ; then
					matrix[$var,1]=$var1
				else
                    echo "error: Not a mac address. Press any key and repeat"
                    read
				fi
			fi
		fi
		if [ ${opt} == "RIA" ]; then
			f1="%$((${#num_rows}+1))s"
			f2=" %15s"
			printf "$f1" ''
			for ((i=1;i<=2;i++)) do
				if ((i==1)); then
					printf "$f2" "MAC Address"
				else
					printf "$f2" "IP Address"
				fi			
			done
			echo
			for ((j=1;j<=num_rows;j++)) do
				printf $f1 $j
				for ((i=1;i<=num_columns;i++)) do
        			printf "$f2" ${matrix[$j,$i]}
    			done
    			echo
			done
			echo "Enter the row of Mac address to associate if any:"
			read var
			if ! [[ $var =~ $re ]] ; then
				var=""
			fi
			echo "Enter the IP address: (range is 10.0.0.50-10.0.0.100)"
			read var1
			if [ -z ${var} ] || (( var > num_rows )); then
				if valid_ip ${var1} ; then
					num_rows=$(( num_rows + 1 ))
					matrix[$num_rows,2]=$var1
				else
                    echo "error: Not an IP address. Press any key and repeat"
                    read
				fi
			else
				if valid_ip ${var1} ; then
					matrix[$var,2]=$var1
				else
                    echo "error: Not an IP address. Press any key and repeat"
                    read
				fi
			fi
		fi
		if [ ${opt} == "END" ]; then
			for ((i=1; i<=num_rows; i++)) do
				dhcpHost="dhcp-host=${matrix[$i,1]},${matrix[$i,2]}"
				echo $dhcpHost >> /home/pi/Programs/footboard2PC/sbin/Autohotspot/config/dnsmasqAHS.conf
				if ((i==1)); then
					echo ${matrix[1,2]} > /home/pi/Programs/footboard2PC/networkIP
				fi
			done
			go "AHD" #Autohotspot Direct
		fi
	fi
}
menu()
{
#selection menu
until [ "$select" = 5 ]; do
	clear
	echo "FTDI Hot Spot network installation"
	echo ""
	echo " 1 = Add MAC Address"
	echo " 2 = Reserve IP Address"
	echo " 3 = Remove network"
	echo " 4 = Change the Hotspots SSID and Password"
	echo " 5 = exit"
	echo ""
	echo -n "Select an Option:"
	read select
	case ${select} in
	1) clear; prepare "AMA" ;; #Prepares array of mac address
	2) clear; prepare "RIA" ;; #Associate IP to mac address
	3) clear; go "REM"	;; #Remove Network configuration
	4) clear ; go "HSS" ;; #Change Hotspot SSID and Password
	5) clear; prepare "END"	;; #Save and call Hotspot
	*) clear; echo "Please select again" ;;
	esac
done
}
check_installed #check system and status
if [ $nftble = "Y" ]; then
	echo "The Internet Hotspots scripts use iptables. nftables is enabled on this system."
	echo "It is not recommended you use iptables and nftables together."
	echo "A nftables version will be available in the next update"
	echo ""
	echo "You can use the 'Autohotspot with NO Internet...' version of the script. Option 2 in the menus"
	echo -n "Press a key to continue"
	read
fi
check_reqfiles
check_wificountry
menu #show menu


